<Window x:Name="_this" x:Class="JKWatcher.ConnectedServerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        DataContext="{Binding ElementName=_this}"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:JKWatcher"
        xmlns:jkclient="clr-namespace:JKClient;assembly=JKClient"
        mc:Ignorable="d"
        Title="ConnectedServerWindow" Height="450" Width="800">
    <Window.Resources>
        <local:Q3StringToPlaintextConverter x:Key="q3StringToPlaintextConverter"></local:Q3StringToPlaintextConverter>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0.6*"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
            <ColumnDefinition Width="0.7*"></ColumnDefinition>
            <ColumnDefinition Width="*" MaxWidth="150"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="0.83*" MaxHeight="200" MinHeight="100"></RowDefinition>
            <RowDefinition Height="20"></RowDefinition>
            <RowDefinition Height="2*"></RowDefinition>
        </Grid.RowDefinitions>
        <DockPanel Grid.RowSpan="3">
            <WrapPanel DockPanel.Dock="Top">
                <Button x:Name="followBtn" Click="followBtn_Click" IsEnabled="False">Follow</Button>
                <Button x:Name="refreshPlayersBtn" Click="refreshPlayersBtn_Click" IsEnabled="True">Refresh</Button>
            </WrapPanel>
            <DataGrid  IsReadOnly="True" CanUserAddRows="False" DockPanel.Dock="Bottom" x:Name="playerListDataGrid" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" SelectionChanged="playerListDataGrid_SelectionChanged">
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding team}">
                                <DataTrigger.Value>
                                    <jkclient:Team>Free</jkclient:Team>
                                </DataTrigger.Value>
                                <Setter Property="Background" Value="LightGreen"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding team}">
                                <DataTrigger.Value>
                                    <jkclient:Team>Red</jkclient:Team>
                                </DataTrigger.Value>
                                <Setter Property="Background" Value="PaleVioletRed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding team}">
                                <DataTrigger.Value>
                                    <jkclient:Team>Blue</jkclient:Team>
                                </DataTrigger.Value>
                                <Setter Property="Background" Value="LightBlue"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding team}">
                                <DataTrigger.Value>
                                    <jkclient:Team>Spectator</jkclient:Team>
                                </DataTrigger.Value>
                                <Setter Property="Background" Value="LightYellow"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding infoValid}" Value="False">
                                <Setter Property="Background" Value="White"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding infoValid}" Value="True">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="cN" Binding="{Binding clientNum}" Width="30"></DataGridTextColumn>
                    <DataGridTextColumn Header="Name" Binding="{Binding name,Converter={StaticResource q3StringToPlaintextConverter}}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Team" Binding="{Binding team}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Ping" Binding="{Binding score.ping}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Score" Binding="{Binding score.score}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Caps" Binding="{Binding score.captures}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Rets" Binding="{Binding score.impressiveCount}"></DataGridTextColumn>
                    <DataGridTextColumn Header="BC" Binding="{Binding score.defendCount}"></DataGridTextColumn>
                </DataGrid.Columns>

            </DataGrid>
        </DockPanel>
        <WrapPanel Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2">
            <!--Various infos and outputs and stuff-->
            <TextBox x:Name="gameTimeTxt" IsReadOnly="True" MinWidth="30" Text="{Binding GameTime,Mode=OneWay}"></TextBox>
            <TextBox x:Name="mapNameTxt" IsReadOnly="True" MinWidth="60" Text="{Binding MapName,Mode=OneWay}"></TextBox>
            <TextBox x:Name="scoreRedTxt" IsReadOnly="True" MinWidth="30" Text="{Binding ScoreRed,Mode=OneWay}"></TextBox>
            <TextBox x:Name="scoreBlueTxt" IsReadOnly="True" MinWidth="30" Text="{Binding ScoreBlue,Mode=OneWay}"></TextBox>
            <CheckBox x:Name="noActivePlayersCheck" IsEnabled="False" IsChecked="{Binding NoActivePlayers,Mode=OneWay}" ToolTip="No active players">NAP</CheckBox>
        </WrapPanel>
        <DockPanel Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Grid.RowSpan="1">
            <WrapPanel DockPanel.Dock="Bottom" Height="30">
                <TextBox x:Name="commandLine" MinWidth="280"></TextBox>
                <Button x:Name="commandSendBtn" Click="commandSendBtn_Click" IsEnabled="False">Execute</Button>
                <Button x:Name="msgSendBtn" Click="msgSendBtn_Click" IsEnabled="False">S</Button>
                <Button x:Name="msgSendTeamBtn" Click="msgSendTeamBtn_Click" IsEnabled="False">T</Button>
                <Button x:Name="msgSendPlayerBtn" Click="msgSendPlayerBtn_Click" IsEnabled="False">P</Button>
                <Label>Verb.:</Label>
                <ComboBox x:Name="verbosityComboBox" SelectionChanged="verbosityComboBox_SelectionChanged">
                    <ComboBoxItem Content="zero" Tag="0"></ComboBoxItem>
                    <ComboBoxItem Content="one" Tag="1"></ComboBoxItem>
                    <ComboBoxItem Content="two" Tag="2"></ComboBoxItem>
                    <ComboBoxItem Content="three" Tag="3"></ComboBoxItem>
                    <ComboBoxItem Content="four" Tag="4" IsSelected="True"></ComboBoxItem>
                    <ComboBoxItem Content="five" Tag="5"></ComboBoxItem>
                </ComboBox>
                <!--<CheckBox x:Name="verboseOutputCheck" Checked="verboseOutputCheck_Checked" Unchecked="verboseOutputCheck_Unchecked">Verbose output</CheckBox>-->
            </WrapPanel>
            <TabControl>
                <TabItem>
                    <TabItem.Header>
                        <WrapPanel>
                            <Label Padding="0" >Colored </Label>
                            <CheckBox Padding="0" x:Name="coloredLogCheck" IsChecked="{Binding LogColoredEnabled}"></CheckBox>
                        </WrapPanel>
                    </TabItem.Header>
                    <ScrollViewer DockPanel.Dock="Top" local:AutoScrollBehavior.AutoScroll="True">
                        <TextBlock x:Name="logTxt" Foreground="White" Background="Black" TextWrapping="Wrap" FontFamily="Courier New">
                    
                    <Run Foreground="Blue" Background="Yellow">ipsum</Run> dolor sit amet, 
                    consectetur adipiscing elit. Donec a velit id turpis <Run Foreground="White" Background="White">maximus tincidunt</Run> vitae in dolor. Suspendisse ullamcorper fermentum rutrum. In metus orci, scelerisque dapibus venenatis gravida, euismod et odio. Cras eget imperdiet velit. Quisque id dolor elit. Nunc at lectus id leo mollis condimentum sed id turpis. Sed lacinia felis eu nisi condimentum, a efficitur nisl auctor. Phasellus mattis molestie finibus. Maecenas lacinia, urna sed dignissim semper, justo felis mattis sapien, ut tempus dolor tellus in urna. Cras posuere turpis eu dui cursus, vitae ultrices neque rhoncus. Proin vel dignissim dolor. Suspendisse non fringilla justo. Aliquam id sollicitudin magna, vel laoreet ante. Aliquam mollis congue orci eget ullamcorper.</TextBlock>
                    </ScrollViewer>
                </TabItem>
                <TabItem>
                    <TabItem.Header>
                        <WrapPanel>
                            <Label Padding="0" >Plain </Label>
                            <CheckBox Padding="0"  x:Name="plainLogCheck" IsChecked="{Binding LogPlainEnabled}"></CheckBox>
                        </WrapPanel>
                    </TabItem.Header>
                    <ScrollViewer DockPanel.Dock="Top" local:AutoScrollBehavior.AutoScroll="True">
                        <TextBlock x:Name="logTxtPlain" TextWrapping="Wrap" FontFamily="Courier New">
                            ipsum dolor sit amet, consectetur adipiscing elit. Donec a velit id turpis maximus tincidunt vitae in dolor. Suspendisse ullamcorper fermentum rutrum. In metus orci, scelerisque dapibus venenatis gravida, euismod et odio. Cras eget imperdiet velit. Quisque id dolor elit. Nunc at lectus id leo mollis condimentum sed id turpis. Sed lacinia felis eu nisi condimentum, a efficitur nisl auctor. Phasellus mattis molestie finibus. Maecenas lacinia, urna sed dignissim semper, justo felis mattis sapien, ut tempus dolor tellus in urna. Cras posuere turpis eu dui cursus, vitae ultrices neque rhoncus. Proin vel dignissim dolor. Suspendisse non fringilla justo. Aliquam id sollicitudin magna, vel laoreet ante. Aliquam mollis congue orci eget ullamcorper.
                        </TextBlock>
                    </ScrollViewer>
                </TabItem>
            </TabControl>
                    
        </DockPanel>
        <DockPanel Grid.Column="1">

            <WrapPanel DockPanel.Dock="Top">
                <Button x:Name="recordBtn" Click="recordBtn_Click" IsEnabled="False">Rec</Button>
                <Button x:Name="stopRecordBtn" Click="stopRecordBtn_Click" IsEnabled="False">StopRec</Button>
                <Button x:Name="newConBtn" Click="newConBtn_Click">NewCon</Button>
                <Button x:Name="delBtn" Click="delBtn_Click" IsEnabled="False">Del</Button>
                <Button x:Name="reconBtn" Click="reconBtn_Click" IsEnabled="False">Recon</Button>
                <Button x:Name="statsBtn" Click="statsBtn_Click" IsEnabled="False">Stats</Button>
            </WrapPanel>
            <DataGrid  IsReadOnly="True" CanUserAddRows="False" DockPanel.Dock="Bottom" x:Name="connectionsDataGrid" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" SelectionChanged="connectionsDataGrid_SelectionChanged">
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding GhostPeer}" Value="True">
                                <Setter Property="Background" Value="PaleVioletRed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="cN" Binding="{Binding ClientNum}" Width="25"></DataGridTextColumn>
                    <DataGridTextColumn Header="psCN" Binding="{Binding SpectatedPlayer}" Width="30"></DataGridTextColumn>
                    <DataGridTextColumn Header="Rec" Binding="{Binding isRecordingADemo}" Width="30"></DataGridTextColumn>
                    <DataGridTextColumn Header="Status" Binding="{Binding Status}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Snaps" Binding="{Binding SnapStatus}"></DataGridTextColumn>
                    <DataGridTextColumn Header="CamOp" Binding="{Binding CameraOperator}" Width="50"></DataGridTextColumn>
                    <DataGridTextColumn Header="PMT" Binding="{Binding PlayerMoveType}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Index" Binding="{Binding Index}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Speed" Binding="{Binding Speed}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Chat"  Binding="{Binding IsMainChatConnection}">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="ToolTip" Value="Is main connection for responding to meme/tool chat commands" />
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="CDelay" Binding="{Binding ChatMemeCommandsDelay}">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="ToolTip" Value="Delay in milliseconds for meme/tool chat commands" />
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                </DataGrid.Columns>

            </DataGrid>
        </DockPanel>
        <DockPanel Grid.Column="2">
            <DockPanel DockPanel.Dock="Bottom">
                <WrapPanel DockPanel.Dock="Top">
                    <Button x:Name="addCtfWatcherBtn" Click="addCtfWatcherBtn_Click">CTF</Button>
                    <Button x:Name="addOCDWatcherBtn" Click="addOCDWatcherBtn_Click">OCD</Button>
                    <Button x:Name="addSpectatorWatcherBtn" Click="addSpectatorWatcherBtn_Click">Spec</Button>
                    <Button x:Name="addStrobeWatcherBtn" Click="addStrobeWatcherBtn_Click">Strobe</Button>
                    <Button x:Name="addSillyWatcherBtn" Click="addSillyWatcherBtn_Click">xd</Button>
                    <Button x:Name="deleteWatcherBtn" Click="deleteWatcherBtn_Click" IsEnabled="True">Delete</Button>
                    <Button x:Name="watcherConfigBtn" Click="watcherConfigBtn_Click" IsEnabled="True">...</Button>
                </WrapPanel>
                <DataGrid  IsReadOnly="True" DockPanel.Dock="Bottom" x:Name="cameraOperatorsDataGrid" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" SelectionChanged="cameraOperatorsDataGrid_SelectionChanged" CanUserAddRows="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Index" Binding="{Binding Index}"></DataGridTextColumn>
                        <DataGridTextColumn Header="Type" Binding="{Binding Type}"></DataGridTextColumn>
                        <DataGridTextColumn Header="Errored" Binding="{Binding HasErrored}"></DataGridTextColumn>
                    </DataGrid.Columns>

                </DataGrid>
            </DockPanel>
            
        </DockPanel>
        <DockPanel x:Name="miniMapContainer" Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" LastChildFill="True">
            <Image x:Name="miniMap" Stretch="Fill" DockPanel.Dock="Left" VerticalAlignment="Center"></Image>
        </DockPanel>
        <StackPanel Grid.Column="3" Grid.Row="2">

            <CheckBox x:Name="checkDraw" Checked="checkDraw_Checked" Unchecked="checkDraw_Checked" Panel.ZIndex="1" IsChecked="False">Draw Minimap</CheckBox>
            <Label>Password</Label><TextBox x:Name="passwordTxt"></TextBox>
            <WrapPanel>
                <Button x:Name="btnSetPassword" Click="btnSetPassword_Click">Set</Button>
                <Button x:Name="btnClearPassword" Click="btnClearPassword_Click">Clear input</Button>
                <Button x:Name="btnFillCurrentPassword" Click="btnFillCurrentPassword_Click">Fill current</Button>
            </WrapPanel>
            <Label>Name</Label><TextBox x:Name="nameTxt"></TextBox>
            <WrapPanel>
                <Button x:Name="btnSetName" Click="btnSetName_Click">Set</Button>
                <Button x:Name="btnClearName" Click="btnClearName_Click">Clear input</Button>
                <Button x:Name="btnFillCurrentName" Click="btnFillCurrentName_Click">Fill current</Button>
            </WrapPanel>
            <StackPanel x:Name="connectionSettingsControls">
                <!--<CheckBox IsChecked="True" x:Name="unixTimeNameColorsCheck" Checked="unixTimeNameColorsCheck_Checked" Unchecked="unixTimeNameColorsCheck_Checked">Demotime name colors</CheckBox>
                <CheckBox IsChecked="True" x:Name="attachClientNumToNameCheck" Checked="attachClientNumToNameCheck_Checked" Unchecked="attachClientNumToNameCheck_Checked">Attach clientNum</CheckBox>-->
                <WrapPanel>

                    <CheckBox IsChecked="{Binding silentMode,Mode=TwoWay}">Silent</CheckBox>
                    <CheckBox IsChecked="{Binding noBotIgnore,Mode=TwoWay}">NoBotIgnore</CheckBox>
                </WrapPanel>
                <CheckBox IsChecked="{Binding demoTimeColorNames,Mode=TwoWay}">Demotime name colors</CheckBox>
                <CheckBox IsChecked="{Binding attachClientNumToName,Mode=TwoWay}">Attach clientNum</CheckBox>
                <WrapPanel>
                    <CheckBox IsChecked="{Binding autoUpgradeToCTF,Mode=TwoWay}">CTF auto-upgr.</CheckBox>
                    <CheckBox IsChecked="{Binding autoUpgradeToCTFWithStrobe,Mode=TwoWay}">str</CheckBox>
                </WrapPanel>
            </StackPanel>
            <StackPanel x:Name="snapsSettingsControls">
                <WrapPanel>
                    <CheckBox x:Name="botOnlySnapsCheck" IsChecked="{Binding forceBotOnlySnaps,Mode=TwoWay}">Bot-only snaps</CheckBox>
                    <TextBox x:Name="botOnlySnapsTxt" Width="20" Margin="5 0 0 0" TextAlignment="Right" Text="{Binding botOnlySnaps,Mode=TwoWay}"></TextBox>
                </WrapPanel>
                <WrapPanel>
                    <CheckBox x:Name="emptySnapsCheck" IsChecked="{Binding forceEmptySnaps,Mode=TwoWay}">Empty snaps</CheckBox>
                    <TextBox x:Name="emptySnapsTxt" Width="20" Margin="5 0 0 0" TextAlignment="Right" Text="{Binding emptySnaps,Mode=TwoWay}"></TextBox>
                </WrapPanel>
                <WrapPanel>
                    <CheckBox IsChecked="{Binding forceAFKSnapDrop,Mode=TwoWay}">AFK maxsnaps</CheckBox>
                    <TextBox Width="20" Margin="5 0 0 0" TextAlignment="Right" Text="{Binding afkMaxSnaps,Mode=TwoWay}"></TextBox>
                </WrapPanel>
            </StackPanel>
            <CheckBox x:Name="netDebugCheck" Checked="netDebugCheck_Checked" Unchecked="netDebugCheck_Checked">NetDebug</CheckBox>
        </StackPanel>
    </Grid>
</Window>

<Window x:Name="_this" x:Class="JKWatcher.ConnectedServerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        DataContext="{Binding ElementName=_this}"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:JKWatcher"
        xmlns:jkclient="clr-namespace:JKClient;assembly=JKClient"
        xmlns:local1="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
        mc:Ignorable="d"
        Title="ConnectedServerWindow" Height="450" Width="800">
    <Window.Resources>
        <local:Q3StringToPlaintextConverter x:Key="q3StringToPlaintextConverter"></local:Q3StringToPlaintextConverter>
        <local:UnderScoreConverter x:Key="underScoreConverter"></local:UnderScoreConverter>
        <local1:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"></local1:BooleanToVisibilityConverter>
    </Window.Resources>
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo>
            <TaskbarItemInfo.ThumbButtonInfos>
                <ThumbButtonInfo x:Name="playerCountThumb" IsInteractive="False" DismissWhenClicked="False" Description="Real player count">
                </ThumbButtonInfo>
                <ThumbButtonInfo x:Name="activePlayerCountThumb" IsInteractive="False" DismissWhenClicked="False" Description="Active player count">
                </ThumbButtonInfo>
            </TaskbarItemInfo.ThumbButtonInfos>
        </TaskbarItemInfo>
    </Window.TaskbarItemInfo>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0.6*"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
            <ColumnDefinition Width="0.7*"></ColumnDefinition>
            <ColumnDefinition Width="*" MaxWidth="150"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="0.83*" MaxHeight="200" MinHeight="100"></RowDefinition>
            <RowDefinition Height="20"></RowDefinition>
            <RowDefinition Height="2*"></RowDefinition>
        </Grid.RowDefinitions>
        <DockPanel Grid.RowSpan="3">
            <WrapPanel DockPanel.Dock="Top">
                <Button x:Name="followBtn" Click="followBtn_Click" IsEnabled="False">Follow</Button>
                <Button x:Name="refreshPlayersBtn" Click="refreshPlayersBtn_Click" IsEnabled="True">Refresh</Button>
            </WrapPanel>
            <DataGrid  IsReadOnly="True" CanUserAddRows="False" DockPanel.Dock="Bottom" x:Name="playerListDataGrid" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" SelectionChanged="playerListDataGrid_SelectionChanged">
                
                <DataGrid.Columns>
                    <DataGridTextColumn Header="cN" Binding="{Binding clientNum}" Width="30">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="{x:Type DataGridCell}">
                                <Style.Triggers>

                                    <DataTrigger Binding="{Binding confirmedJKWatcherFightbot}" Value="True">
                                        <Setter Property="Background" Value="Black"/>
                                        <Setter Property="Foreground" Value="White"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding confirmedBot}" Value="True">
                                        <Setter Property="Background" Value="Gray"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="Name" Binding="{Binding name,Converter={StaticResource q3StringToPlaintextConverter}}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Team" Binding="{Binding team}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Ping" Binding="{Binding currentScore.ping}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Score" Binding="{Binding currentScore.score}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Time" Binding="{Binding currentScore.time}"></DataGridTextColumn>
                    <DataGridTextColumn Header="S/T" Binding="{Binding currentScore.scorePerMinute, StringFormat=N2}"></DataGridTextColumn>
                    <DataGridTextColumn Header="S/D" Binding="{Binding currentScore.scorePerDeaths, StringFormat=N2}"></DataGridTextColumn>
                    <DataGridTextColumn Header="KDm" Binding="{Binding currentScore.kdMod, StringFormat=N2}"></DataGridTextColumn>
                    <DataGridTextColumn Header="D" Binding="{Binding currentScore.deaths}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Caps" Binding="{Binding currentScore.captures}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Rets" Binding="{Binding ProbableRetCount}"></DataGridTextColumn>
                    <DataGridTextColumn Header="BC" Binding="{Binding currentScore.defendCount}"></DataGridTextColumn>
                    <DataGridTextColumn Header="VP" Binding="{Binding VisiblePlayers.VisiblePlayersString}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Skin" Binding="{Binding model}"></DataGridTextColumn>
                    <DataGridTextColumn Header="G2" Binding="{Binding g2Rating}"></DataGridTextColumn>
                    <DataGridTextColumn Header="G2TG" Binding="{Binding g2RatingThisGame}"></DataGridTextColumn>
                </DataGrid.Columns>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Style.Triggers>

                            <DataTrigger Binding="{Binding team}">
                                <DataTrigger.Value>
                                    <jkclient:Team>Free</jkclient:Team>
                                </DataTrigger.Value>
                                <Setter Property="Background" Value="LightGreen"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding team}">
                                <DataTrigger.Value>
                                    <jkclient:Team>Red</jkclient:Team>
                                </DataTrigger.Value>
                                <Setter Property="Background" Value="PaleVioletRed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding team}">
                                <DataTrigger.Value>
                                    <jkclient:Team>Blue</jkclient:Team>
                                </DataTrigger.Value>
                                <Setter Property="Background" Value="LightBlue"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding IsAlive}" Value="False">
                                <Setter Property="Foreground" Value="Maroon"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding team}">
                                <DataTrigger.Value>
                                    <jkclient:Team>Spectator</jkclient:Team>
                                </DataTrigger.Value>
                                <Setter Property="Background" Value="LightYellow"/>
                                <Setter Property="Foreground" Value="Black"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsFrozen}" Value="True">
                                <Setter Property="Foreground" Value="MediumBlue"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding inactiveMOH}" Value="True">
                                <Setter Property="Foreground" Value="Gray"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding infoValid}" Value="False">
                                <Setter Property="Background" Value="White"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding infoValid}" Value="True">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
            </DataGrid>
        </DockPanel>
        <WrapPanel Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2">
            <!--Various infos and outputs and stuff-->
            <TextBox x:Name="gameTimeTxt" IsReadOnly="True" MinWidth="30" Text="{Binding GameTime,Mode=OneWay}"></TextBox>
            <TextBox x:Name="mapNameTxt" IsReadOnly="True" MinWidth="60" Text="{Binding MapName,Mode=OneWay}"></TextBox>
            <TextBox x:Name="scoreRedTxt" IsReadOnly="True" MinWidth="30" Text="{Binding ScoreRed,Mode=OneWay}"></TextBox>
            <TextBox x:Name="scoreBlueTxt" IsReadOnly="True" MinWidth="30" Text="{Binding ScoreBlue,Mode=OneWay}"></TextBox>
            <CheckBox x:Name="noActivePlayersCheck" IsEnabled="False" IsChecked="{Binding NoActivePlayers,Mode=OneWay}" ToolTip="No active players">NAP</CheckBox>
            <Button x:Name="levelshotBtn" Click="levelshotBtn_Click">Levelshot</Button>
            <Button x:Name="levelshotBtnOver200" Click="levelshotBtnOver200_Click">200</Button>
            <Button x:Name="levelshotThisGameBtnOver200" Click="levelshotThisGameBtnOver200_Click">TG200</Button>
            <Button x:Name="testScoreboardBtn" Click="testScoreboardBtn_Click">Test</Button>
        </WrapPanel>
        <DockPanel Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Grid.RowSpan="1">
            <WrapPanel DockPanel.Dock="Bottom" Height="30">
                <TextBox x:Name="commandLine" Width="280"></TextBox>
                <Button x:Name="commandSendBtn" Click="commandSendBtn_Click" IsEnabled="False">Execute</Button>
                <Button x:Name="commandListExecuteBtn" Click="commandListExecuteBtn_Click" IsEnabled="False" ToolTip="Execute command list">ECL</Button>
                <Button x:Name="msgSendCrossBtn" Click="msgSendCrossBtn_Click" IsEnabled="False">C</Button>
                <Button x:Name="msgSendBtn" Click="msgSendBtn_Click" IsEnabled="False">S</Button>
                <Button x:Name="msgSendTeamBtn" Click="msgSendTeamBtn_Click" IsEnabled="False">T</Button>
                <Button x:Name="msgSendPlayerBtn" Click="msgSendPlayerBtn_Click" IsEnabled="False">P</Button>
                <Button x:Name="buttonHitBtn" Click="buttonHitBtn_Click" IsEnabled="False">B</Button>
                <Label ToolTip="Verbosity level">V.:</Label>
                <ComboBox x:Name="verbosityComboBox" SelectionChanged="verbosityComboBox_SelectionChanged">
                    <ComboBoxItem Content="0" Tag="0"></ComboBoxItem>
                    <ComboBoxItem Content="1" Tag="1"></ComboBoxItem>
                    <ComboBoxItem Content="2" Tag="2"></ComboBoxItem>
                    <ComboBoxItem Content="3" Tag="3"></ComboBoxItem>
                    <ComboBoxItem Content="4" Tag="4" IsSelected="True"></ComboBoxItem>
                    <ComboBoxItem Content="5" Tag="5"></ComboBoxItem>
                </ComboBox>
                <CheckBox x:Name="showCmdMsgNumCheck" Checked="showCmdMsgNumCheck_Checked" Unchecked="showCmdMsgNumCheck_Checked"></CheckBox>
                <Label Padding="0" ToolTip="Show message num for cmds">N</Label>
                <!--<CheckBox x:Name="verboseOutputCheck" Checked="verboseOutputCheck_Checked" Unchecked="verboseOutputCheck_Unchecked">Verbose output</CheckBox>-->
            </WrapPanel>
            <TabControl>
                <TabItem>
                    <TabItem.Header>
                        <WrapPanel>
                            <Label Padding="0" >Colored </Label>
                            <CheckBox Padding="0" x:Name="coloredLogCheck" IsChecked="{Binding LogColoredEnabled}"></CheckBox>
                        </WrapPanel>
                    </TabItem.Header>
                    <Grid>
                        <ScrollViewer DockPanel.Dock="Top" local:AutoScrollBehavior.AutoScroll="True">
                            <TextBlock x:Name="logTxt" Foreground="White" Background="Black" TextWrapping="Wrap" FontFamily="Courier New">
                    
                        <Run Foreground="Blue" Background="Yellow">ipsum</Run> dolor sit amet, 
                        consectetur adipiscing elit. Donec a velit id turpis <Run Foreground="White" Background="White">maximus tincidunt</Run> vitae in dolor. Suspendisse ullamcorper fermentum rutrum. In metus orci, scelerisque dapibus venenatis gravida, euismod et odio. Cras eget imperdiet velit. Quisque id dolor elit. Nunc at lectus id leo mollis condimentum sed id turpis. Sed lacinia felis eu nisi condimentum, a efficitur nisl auctor. Phasellus mattis molestie finibus. Maecenas lacinia, urna sed dignissim semper, justo felis mattis sapien, ut tempus dolor tellus in urna. Cras posuere turpis eu dui cursus, vitae ultrices neque rhoncus. Proin vel dignissim dolor. Suspendisse non fringilla justo. Aliquam id sollicitudin magna, vel laoreet ante. Aliquam mollis congue orci eget ullamcorper.</TextBlock>
                        </ScrollViewer>
                        <StackPanel>
                            <StackPanel HorizontalAlignment="Right" Margin="0 0 20 0" Background="LightGray">
                                <CheckBox IsChecked="True" Background="Gray" x:Name="quickCommandsShowCheck">Show QuickCommands</CheckBox>
                                <ItemsControl x:Name="quickCommandsControl" Visibility="{Binding ElementName=quickCommandsShowCheck,Path=IsChecked,Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Button Content="{Binding Converter={StaticResource underScoreConverter}}" IsEnabled="{Binding Source={x:Reference commandSendBtn},Path=IsEnabled}" FontSize="11" Click="quickCmdBtn_Click"></Button>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </TabItem>
                <TabItem>
                    <TabItem.Header>
                        <WrapPanel>
                            <Label Padding="0" >Plain </Label>
                            <CheckBox Padding="0"  x:Name="plainLogCheck" IsChecked="{Binding LogPlainEnabled}"></CheckBox>
                        </WrapPanel>
                    </TabItem.Header>
                    <ScrollViewer DockPanel.Dock="Top" local:AutoScrollBehavior.AutoScroll="True">
                        <TextBlock x:Name="logTxtPlain" TextWrapping="Wrap" FontFamily="Courier New">
                            ipsum dolor sit amet, consectetur adipiscing elit. Donec a velit id turpis maximus tincidunt vitae in dolor. Suspendisse ullamcorper fermentum rutrum. In metus orci, scelerisque dapibus venenatis gravida, euismod et odio. Cras eget imperdiet velit. Quisque id dolor elit. Nunc at lectus id leo mollis condimentum sed id turpis. Sed lacinia felis eu nisi condimentum, a efficitur nisl auctor. Phasellus mattis molestie finibus. Maecenas lacinia, urna sed dignissim semper, justo felis mattis sapien, ut tempus dolor tellus in urna. Cras posuere turpis eu dui cursus, vitae ultrices neque rhoncus. Proin vel dignissim dolor. Suspendisse non fringilla justo. Aliquam id sollicitudin magna, vel laoreet ante. Aliquam mollis congue orci eget ullamcorper.
                        </TextBlock>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="Advanced Settings">
                    <StackPanel x:Name="advancedSettingsControls">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="2*"></ColumnDefinition>
                                <ColumnDefinition></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <StackPanel Grid.Column="0">
                                <Label>Quick commands (show above log), separate with ";":</Label>
                                <TextBox Text="{Binding quickCommands,Mode=TwoWay}"></TextBox>
                            </StackPanel>
                            <StackPanel Grid.Column="1">
                                <Label ToolTip="key-value pairs like: key1:value1,key2:value2">Extra demo metadata:</Label>
                                <TextBox Text="{Binding extraDemoMeta,Mode=TwoWay}"></TextBox>
                            </StackPanel>
                        </Grid>
                        <Label ToolTip="'wait' command is in milliseconds, not frames, and does not block, just sets the delay for a command.">Commands on map change, separate with ";", "wait" command is in milliseconds:</Label>
                        <TextBox Text="{Binding mapChangeCommands,Mode=TwoWay}"></TextBox>
                        <Label ToolTip="Available: gameTypeNotCTF, kicked, playercount_under:10:60000 (example for the latter)">Disconnect triggers (separate with ,):</Label>
                        <TextBox Text="{Binding disconnectTriggers,Mode=TwoWay}"></TextBox>
                        <Label>
                            <Label.ToolTip>
                                <StackPanel MaxWidth="600">
                                    <TextBlock>
                                        Example: print_contains:randomstring:randomcommand;randomcommand2,chat_contains:randomstring2:randomcommand3 $name;randomcommand4,playeractive_matchname:thomas:wait 5000;follow $clientnum;randomcommand4
                                        <LineBreak></LineBreak>This can contain multiple conditional command blocks, separated by a comma.
                                        <LineBreak></LineBreak>Each command block contains 3 values separated by a ":"
                                        <LineBreak></LineBreak>The first value is the type of condition: print_contains, chat_contains or playeractive_matchname
                                        <LineBreak></LineBreak>The second value is a regular expression that works in combination with the condition type. For print_contains, it must match a print output. For chat_contains, it must match a chat message. For playeractive_matchname it must match a player who has become active (joined as non-spectator).
                                        <LineBreak></LineBreak>The third value is commands to execute, separated by semicolon. You can use "wait" as a special command with a number that says how many milliseconds should be waited until this command is executed. This is non-blocking and just adds a delay to the execution. The actual execution time can be even longer to avoid getting rate-limited by the server.
                                        <LineBreak></LineBreak>
                                        <LineBreak></LineBreak>For chat_contains and playeractive_matchname, you can use placeholders in the commands: $name and $clientnum. They correspond to the matched message/player. And $myclientnum (our clientnum)
                                    </TextBlock>
                                </StackPanel>
                            </Label.ToolTip>
                            <Label.Content>
                                Conditional commands (hover for details):
                            </Label.Content>
                        </Label>
                        <TextBox Text="{Binding conditionalCommands,Mode=TwoWay}">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding conditionalCommandsContainErrors,Mode=OneWay}" Value="True">
                                            <Setter Property="Background" Value="PaleVioletRed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <WrapPanel>
                            <CheckBox IsChecked="{Binding allowWayPointBotmode,Mode=TwoWay}">Allow waypoint botmode</CheckBox>
                            <CheckBox IsChecked="{Binding allowWayPointBotmodeCommands,Mode=TwoWay}">Allow waypoint commands</CheckBox>
                        </WrapPanel>
                        <WrapPanel>
                            <CheckBox IsChecked="{Binding ignoreQuietMode,Mode=TwoWay}">Ignore Quiet Mode</CheckBox>
                            <Button x:Name="resetQuietModeBtn" Click="resetQuietModeBtn_Click">Reset Quiet Mode</Button>
                        </WrapPanel>
                        <WrapPanel>

                            <CheckBox IsChecked="{Binding mohFastSwitchFollow,Mode=TwoWay}">MOH fast switch follow</CheckBox>
                            <CheckBox IsChecked="{Binding mohVeryFastSwitchFollow,Mode=TwoWay}">very fast </CheckBox>
                            <Label Margin="5 0 0 0" Padding="0" > (manual count):</Label>
                            <TextBox  Width="20" Margin="0 0 0 0" Padding="0" TextAlignment="Right" Text="{Binding mohVeryFastSwitchFollowManualCount,Mode=TwoWay}"></TextBox>
                            <Label Margin="5 0 0 0" Padding="0" > (expansion minduration):</Label>
                            <TextBox  Width="20" Margin="0 0 0 0" Padding="0" TextAlignment="Right" Text="{Binding mohExpansionSwitchMinDuration,Mode=TwoWay}"></TextBox>
                        </WrapPanel>
                    </StackPanel>
                </TabItem>
                <TabItem Header="Debug">
                    <StackPanel x:Name="debugStats">
                    </StackPanel>
                </TabItem>
                <TabItem Header="Debug (Conn)">
                    <StackPanel DataContext="{Binding ElementName=connectionsDataGrid,Path=SelectedItem}">
                        <WrapPanel>
                            <Label>Client num:</Label>
                            <TextBlock IsEnabled="False" Text="{Binding ClientNum,Mode=OneWay}"></TextBlock>
                        </WrapPanel>
                        <WrapPanel>
                            <Label>Intermission cam set:</Label>
                            <CheckBox IsEnabled="False" IsChecked="{Binding intermissionCamSet,Mode=OneWay}"></CheckBox>
                            <Label ToolTip="True intermission position">(true)</Label>
                            <CheckBox IsEnabled="False" IsChecked="{Binding intermissionCamTrueIntermission,Mode=OneWay}"></CheckBox>
                            <Label>Pos:</Label>
                            <TextBlock IsEnabled="False" Text="{Binding intermissionCamPos,Mode=OneWay}"></TextBlock>
                            <Label>Ang:</Label>
                            <TextBlock IsEnabled="False" Text="{Binding intermissionCamAngles,Mode=OneWay}"></TextBlock>
                        </WrapPanel>
                    </StackPanel>
                </TabItem>
            </TabControl>
                    
        </DockPanel>
        <DockPanel Grid.Column="1">

            <WrapPanel DockPanel.Dock="Top">
                <Button x:Name="recordBtn" Click="recordBtn_Click" IsEnabled="False">Rec</Button>
                <Button x:Name="stopRecordBtn" Click="stopRecordBtn_Click" IsEnabled="False">StopRec</Button>
                <Button x:Name="newConBtn" Click="newConBtn_Click">NewCon</Button>
                <Button x:Name="delBtn" Click="delBtn_Click" IsEnabled="False">Del</Button>
                <Button x:Name="reconBtn" Click="reconBtn_Click" IsEnabled="False">Recon</Button>
                <Button x:Name="statsBtn" Click="statsBtn_Click" IsEnabled="False">Stats</Button>
                <Button x:Name="unselectBtn" Click="unselectBtn_Click" IsEnabled="False">/</Button>
            </WrapPanel>
            <DataGrid  IsReadOnly="True" CanUserAddRows="False" DockPanel.Dock="Bottom" x:Name="connectionsDataGrid" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" SelectionChanged="connectionsDataGrid_SelectionChanged">
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding GhostPeer}" Value="True">
                                <Setter Property="Background" Value="PaleVioletRed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding QuietMode}" Value="True">
                                <Setter Property="Background" Value="Cyan"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="cN" Binding="{Binding connectionViewData.ClientNum}" Width="25"></DataGridTextColumn>
                    <DataGridTextColumn Header="psCN" Binding="{Binding connectionViewData.SpectatedPlayer}" Width="30"></DataGridTextColumn>
                    <DataGridTextColumn Header="Rec" Binding="{Binding connectionViewData.isRecordingADemo}" Width="30"></DataGridTextColumn>
                    <DataGridTextColumn Header="Status" Binding="{Binding connectionViewData.Status}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Snaps" Binding="{Binding connectionViewData.SnapStatus}"></DataGridTextColumn>
                    <DataGridTextColumn Header="CamOp" Binding="{Binding CameraOperator.Index}" Width="50"></DataGridTextColumn>
                    <DataGridTextColumn Header="PMT" Binding="{Binding connectionViewData.PlayerMoveType}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Index" Binding="{Binding connectionViewData.Index}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Speed" Binding="{Binding connectionViewData.Speed}"></DataGridTextColumn>
                    <DataGridTextColumn Header="wishSpec" Binding="{Binding connectionViewData.WishSpectatedPlayer}" Width="30"></DataGridTextColumn>
                    <DataGridTextColumn Header="Chat"  Binding="{Binding connectionViewData.IsMainChatConnection}">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="ToolTip" Value="Is main connection for responding to meme/tool chat commands" />
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="CDelay" Binding="{Binding connectionViewData.ChatMemeCommandsDelay}">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="ToolTip" Value="Delay in milliseconds for meme/tool chat commands" />
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="Quiet" Binding="{Binding connectionViewData.QuietModeTimeOut}" Width="30"></DataGridTextColumn>
                </DataGrid.Columns>

            </DataGrid>
        </DockPanel>
        <DockPanel Grid.Column="2">
            <DockPanel DockPanel.Dock="Bottom">
                <WrapPanel DockPanel.Dock="Top">
                    <Button x:Name="addCtfWatcherBtn" Click="addCtfWatcherBtn_Click" FontSize="10">CTF</Button>
                    <Button x:Name="addOCDWatcherBtn" Click="addOCDWatcherBtn_Click" FontSize="10">OCD</Button>
                    <Button x:Name="addSpectatorWatcherBtn" Click="addSpectatorWatcherBtn_Click" FontSize="10">Spec</Button>
                    <Button x:Name="addStrobeWatcherBtn" Click="addStrobeWatcherBtn_Click" FontSize="10">Strobe</Button>
                    <Button x:Name="addSillyWatcherBtn" Click="addSillyWatcherBtn_Click" FontSize="10">xd</Button>
                    <Button x:Name="addFFAWatcherBtn" Click="addFFAWatcherBtn_Click" FontSize="10">FFA</Button>
                    <Button x:Name="deleteWatcherBtn" Click="deleteWatcherBtn_Click" IsEnabled="True" FontSize="10">Del</Button>
                    <Button x:Name="watcherConfigBtn" Click="watcherConfigBtn_Click" IsEnabled="True" FontSize="10">...</Button>
                </WrapPanel>
                <DataGrid  IsReadOnly="True" DockPanel.Dock="Bottom" x:Name="cameraOperatorsDataGrid" AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" SelectionChanged="cameraOperatorsDataGrid_SelectionChanged" CanUserAddRows="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Index" Binding="{Binding Index}"></DataGridTextColumn>
                        <DataGridTextColumn Header="Type" Binding="{Binding Type}"></DataGridTextColumn>
                        <DataGridTextColumn Header="Errored" Binding="{Binding HasErrored}"></DataGridTextColumn>
                    </DataGrid.Columns>

                </DataGrid>
            </DockPanel>
            
        </DockPanel>
        <DockPanel x:Name="miniMapContainer" Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" LastChildFill="True">
            <Image x:Name="miniMap" Stretch="Fill" DockPanel.Dock="Left" VerticalAlignment="Center"></Image>
        </DockPanel>
        <StackPanel Grid.Column="3" Grid.Row="2">

            <WrapPanel>
                <CheckBox x:Name="checkDraw" Checked="checkDraw_Checked" Unchecked="checkDraw_Checked" Panel.ZIndex="1" IsChecked="False" FontSize="10">MiniMap</CheckBox>
                <CheckBox x:Name="checkDraw3D" Checked="checkDraw3D_Checked" Unchecked="checkDraw3D_Checked" Panel.ZIndex="1" IsChecked="False" Visibility="Hidden">3D</CheckBox>
                <Slider Width="50" Minimum="1.0" Maximum="10.0" x:Name="minimapVelocityScaleSlider" ValueChanged="minimapVelocityScaleSlider_ValueChanged" Value="1.0"></Slider>
            </WrapPanel>
            <TabControl>
                <TabItem Header="PW">
                    <StackPanel>

                        <TextBox x:Name="passwordTxt"></TextBox>
                        <WrapPanel>
                            <Button x:Name="btnSetPassword" Click="btnSetPassword_Click">Set</Button>
                            <Button x:Name="btnClearPassword" Click="btnClearPassword_Click">Clear input</Button>
                            <Button x:Name="btnFillCurrentPassword" Click="btnFillCurrentPassword_Click">Fill current</Button>
                        </WrapPanel>
                    </StackPanel>
                </TabItem>
                <TabItem Header="Name">
                    <StackPanel>
                        <TextBox x:Name="nameTxt"></TextBox>
                        <WrapPanel>
                            <Button x:Name="btnSetName" Click="btnSetName_Click">Set</Button>
                            <Button x:Name="btnClearName" Click="btnClearName_Click">Clear input</Button>
                            <Button x:Name="btnFillCurrentName" Click="btnFillCurrentName_Click">Fill current</Button>
                        </WrapPanel>
                    </StackPanel>
                </TabItem>
                <TabItem Header="Misc">
                    <StackPanel>
                        <TextBox x:Name="miscKeyTxt"></TextBox>
                        <TextBox x:Name="miscValTxt"></TextBox>
                        <WrapPanel>
                            <Button x:Name="btnSetMisc" Click="btnSetMisc_Click">Set</Button>
                            <Button x:Name="btnClearMisc" Click="btnClearMisc_Click">Clear input</Button>
                            <Button x:Name="btnFillCurrentMisc" Click="btnFillCurrentMisc_Click" IsEnabled="False">Fill current</Button>
                        </WrapPanel>
                    </StackPanel>
                </TabItem>
            </TabControl>
            <StackPanel x:Name="connectionSettingsControls">
                <TabControl>
                    <TabItem Header="Settings">
                        <StackPanel>
                            <!--<CheckBox IsChecked="True" x:Name="unixTimeNameColorsCheck" Checked="unixTimeNameColorsCheck_Checked" Unchecked="unixTimeNameColorsCheck_Checked">Demotime name colors</CheckBox>
                <CheckBox IsChecked="True" x:Name="attachClientNumToNameCheck" Checked="attachClientNumToNameCheck_Checked" Unchecked="attachClientNumToNameCheck_Checked">Attach clientNum</CheckBox>-->
                            <WrapPanel>

                                <CheckBox IsChecked="{Binding silentMode,Mode=TwoWay}">Silent</CheckBox>
                                <CheckBox IsChecked="{Binding noBotIgnore,Mode=TwoWay}">NoBotIgnore</CheckBox>
                            </WrapPanel>
                            <CheckBox IsChecked="{Binding demoTimeColorNames,Mode=TwoWay}">Demotime name colors</CheckBox>
                            <CheckBox IsChecked="{Binding attachClientNumToName,Mode=TwoWay}">Attach clientNum</CheckBox>
                            <WrapPanel>
                                <CheckBox IsChecked="{Binding autoUpgradeToCTF,Mode=TwoWay}">CTF auto-upgr.</CheckBox>
                                <CheckBox IsChecked="{Binding autoUpgradeToCTFWithStrobe,Mode=TwoWay}">str</CheckBox>
                            </WrapPanel>
                        </StackPanel>
                    </TabItem>
                    <TabItem Header="Network">
                        <StackPanel>
                            <StackPanel x:Name="snapsSettingsControls">

                                <WrapPanel>
                                    <CheckBox x:Name="setBaseSnapsCheck" IsChecked="{Binding setBaseSnaps,Mode=TwoWay}">Snaps</CheckBox>
                                    <CheckBox x:Name="baseSnapsCheck" IsChecked="{Binding forceBaseSnaps,Mode=TwoWay}">force</CheckBox>
                                    <TextBox x:Name="baseSnapsTxt" Width="35" Margin="5 0 0 0" TextAlignment="Right" Text="{Binding baseSnaps,Mode=TwoWay}"></TextBox>
                                </WrapPanel>
                                <WrapPanel>
                                    <CheckBox x:Name="botOnlySnapsCheck" IsChecked="{Binding forceBotOnlySnaps,Mode=TwoWay}">Bot-only snaps</CheckBox>
                                    <TextBox x:Name="botOnlySnapsTxt" Width="20" Margin="5 0 0 0" TextAlignment="Right" Text="{Binding botOnlySnaps,Mode=TwoWay}"></TextBox>
                                </WrapPanel>
                                <WrapPanel>
                                    <CheckBox x:Name="emptySnapsCheck" IsChecked="{Binding forceEmptySnaps,Mode=TwoWay}">Empty snaps</CheckBox>
                                    <TextBox x:Name="emptySnapsTxt" Width="20" Margin="5 0 0 0" TextAlignment="Right" Text="{Binding emptySnaps,Mode=TwoWay}"></TextBox>
                                </WrapPanel>
                                <WrapPanel>
                                    <CheckBox IsChecked="{Binding forceAFKSnapDrop,Mode=TwoWay}">AFK maxsnaps</CheckBox>
                                    <TextBox Width="20" Margin="5 0 0 0" TextAlignment="Right" Text="{Binding afkMaxSnaps,Mode=TwoWay}"></TextBox>
                                </WrapPanel>
                                <WrapPanel>
                                    <CheckBox IsChecked="{Binding pingAdjustActive,Mode=TwoWay}">Ping adjust</CheckBox>
                                    <TextBox Width="40" Margin="5 0 0 0" TextAlignment="Right" Text="{Binding pingAdjust,Mode=TwoWay}"></TextBox>
                                </WrapPanel>
                            </StackPanel>
                            <!--<CheckBox x:Name="netDebugCheck" Checked="netDebugCheck_Checked" Unchecked="netDebugCheck_Checked">NetDebug</CheckBox>-->
                            <WrapPanel>
                                <CheckBox x:Name="netDebugCheck" IsChecked="{Binding netDebug,Mode=TwoWay}">NetDbg</CheckBox>
                                <CheckBox IsChecked="{Binding fightDebug,Mode=TwoWay}">FightDbg</CheckBox>
                            </WrapPanel>
                        </StackPanel>
                    </TabItem>
                </TabControl>
                
            </StackPanel>
            
        </StackPanel>
    </Grid>
</Window>
